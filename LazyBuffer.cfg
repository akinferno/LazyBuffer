# LazyBuffer.cfg is created by Dante, aka AKinferno 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
# More info can be found at https://github.com/akinferno/LazyBuffer/ 

[mcu buffer_mcu]
canbus_uuid: <insert your CAN ID here>

# Variables for compatibility
[gcode_macro variables]
variable_buffer_enabled: True
variable_filament_runout_enabled: True
variable_auto_load_enabled: True
variable_auto_unload_enabled: True
variable_clog_detect_enabled: True
variable_break_detect_enabled: True
variable_debug: False
variable_buffer_rd: 9.55    # Track current rotation_distance for buffer **CORRECT IF YOU KNOW VALUE

### DO NOT CHANGE BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING ###
########################################################################
variable_module_version: 0.26
variable_buffer_mode: 0  # Default=0, Green=1, Blue=2, Red=3
variable_led_state: 0 # Tracks current LED state: 0=OFF, 1=GREEN, 2=BLUE, 3=RED, 4=DIMGREEN, 5=DIMBLUE, 6=DIMRED
variable_filament_loading: False
variable_filament_unloading: False
variable_filament_removed: False
variable_stop_feeding: False
variable_is_manual_feeding: False
variable_plug_status: False
variable_winding_status: False
variable_clog_retry: False
variable_break_retry: False
variable_auto_load_step: 0
variable_auto_unload_step: 0
variable_check_auto_load_active: False
variable_check_auto_unload_active: False
variable_buffer_reset: False
gcode:



## Hardware Initialization and setup ##
[force_move]
enable_force_move: True

# Buffer motor definition
[extruder_stepper filament_buffer]
extruder:
step_pin: buffer_mcu: PA8
dir_pin: buffer_mcu: PA9    
enable_pin: !buffer_mcu: PA11  
microsteps: 16
rotation_distance: 9.55
full_steps_per_rotation: 200

[tmc2209 extruder_stepper filament_buffer]
uart_pin: buffer_mcu: PA12
interpolate: True
run_current: 0.7
hold_current: 0.4
sense_resistor: 0.150
uart_address: 3
driver_SGTHRS: 0  # Disable stall detection

########################################################################

## Virtual pins to allow feature control in Mainsail/Fluidd
[virtual_pins]

[output_pin enable_buffer]
pin: virtual_pin:enable_buffer_pin
pwm: False
value: 1
[gcode_button toggle_buffer]
pin: virtual_pin:toggle_buffer_pin
press_gcode:
    {% if printer["gcode_macro variables"].buffer_enabled %}
        { action_respond_info("Disabling buffer") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_enabled VALUE=False
        SET_PIN PIN=enable_buffer VALUE=0
    {% else %}
        { action_respond_info("Enabling buffer") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_enabled VALUE=True
        SET_PIN PIN=enable_buffer VALUE=1
    {% endif %}

[output_pin enable_clog_detection]
pin: virtual_pin:enable_clog_detection_pin
pwm: False
value: 1
[gcode_button toggle_clog_detection]
pin: virtual_pin:toggle_clog_detection_pin
press_gcode:
    {% if printer["gcode_macro variables"].clog_detect_enabled %}
        { action_respond_info("Disabling clog detection") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_detect_enabled VALUE=False
        SET_PIN PIN=enable_clog_detection VALUE=0
    {% else %}
        { action_respond_info("Enabling clog detection") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_detect_enabled VALUE=True
        SET_PIN PIN=enable_clog_detection VALUE=1
    {% endif %}

[output_pin enable_runout_detection]
pin: virtual_pin:enable_runout_detection_pin
pwm: False
value: 1
[gcode_button toggle_runout_detection]
pin: virtual_pin:toggle_runout_detection_pin
press_gcode:
    {% if printer["gcode_macro variables"].break_detect_enabled %}
        { action_respond_info("Disabling runout detection") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=break_detect_enabled VALUE=False
        SET_PIN PIN=enable_runout_detection VALUE=0
    {% else %}
        { action_respond_info("Enabling runout detection") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=break_detect_enabled VALUE=True
        SET_PIN PIN=enable_runout_detection VALUE=1
    {% endif %}

[output_pin enable_debug]
pin: virtual_pin:enable_debug_pin
pwm: False
value: 0
[gcode_button toggle_debug]
pin: virtual_pin:toggle_debug_pin
press_gcode:
    {% if printer["gcode_macro variables"].debug %}
        { action_respond_info("Disabling debug messages") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=debug VALUE=False
        SET_PIN PIN=enable_debug VALUE=0
    {% else %}
        { action_respond_info("Enabling debug messages") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=debug VALUE=True
        SET_PIN PIN=enable_debug VALUE=1
    {% endif %}

[output_pin enable_auto_load]
pin: virtual_pin:enable_auto_load_pin
pwm: False
value: 1
[gcode_button toggle_auto_load]
pin: virtual_pin:toggle_auto_load_pin
press_gcode:
    {% if printer["gcode_macro variables"].auto_load_enabled %}
        { action_respond_info("Disabling auto load") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_load_enabled VALUE=False
        SET_PIN PIN=enable_auto_load VALUE=0
    {% else %}
        { action_respond_info("Enabling auto load") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_load_enabled VALUE=True
        SET_PIN PIN=enable_auto_load VALUE=1
    {% endif %}

[output_pin enable_auto_unload]
pin: virtual_pin:enable_auto_unload_pin
pwm: False
value: 1
[gcode_button toggle_auto_unload]
pin: virtual_pin:toggle_auto_unload_pin
press_gcode:
    {% if printer["gcode_macro variables"].auto_unload_enabled %}
        { action_respond_info("Disabling auto unload") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_unload_enabled VALUE=False
        SET_PIN PIN=enable_auto_unload VALUE=0
    {% else %}
        { action_respond_info("Enabling auto unload") }
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_unload_enabled VALUE=True
        SET_PIN PIN=enable_auto_unload VALUE=1
    {% endif %}

########################################################################

## Filament detection sensor
[gcode_button filament_detect]
pin: ^buffer_mcu: PA10
press_gcode:  #Same as insert
    {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Filament detected! filament_detect insert triggered") }{% endif %}
    SET_PIN PIN=fake_filament_sensor VALUE=1
    SETLED_DIMBLUE
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_load_step VALUE=0
    {% if printer["gcode_macro variables"].auto_load_enabled and printer["gcode_macro variables"].filament_removed and printer["gcode_macro variables"].auto_load_step == 0 %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Auto load enabled, beginning feed...") }{% endif %}
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_removed VALUE=False
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=True
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=
        # The following move is just to load filament into the buffer extruder
        BUFFER_STEPPER MOVE=10 SPEED=5
        # The following move is to load the first 1 meter quickly load filament into the buffer extruder
        BUFFER_STEPPER MOVE=1500 SPEED=25
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=auto_load_step VALUE=1
        UPDATE_DELAYED_GCODE ID=CHECK_AUTO_LOAD DURATION=61
    {% elif printer["gcode_macro variables"].auto_load_enabled %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Auto load enabled, Filament loaded") }{% endif %}
    {% else %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Auto load disabled.") }{% endif %}
    {% endif %}
release_gcode: #Same as runout
    {% if printer["gcode_macro variables"].filament_runout_enabled %}
        UPDATE_DELAYED_GCODE ID=CHECK_FILAMENT_SENSOR DURATION=2
    {% else %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Filament runout detection disabled, no check performed.") }{% endif %}
    {% endif %}
    SETLED_RED
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_removed VALUE=True


[delayed_gcode CHECK_FILAMENT_SENSOR]
gcode:
    {% if printer["gcode_button filament_detect"].state == 'RELEASED' %}
        SET_PIN PIN=fake_filament_sensor VALUE=0
        SETLED_DIMRED
        PAUSE
        { action_respond_info("Filament runout confirmed! Printing Paused. Please insert filament.") }
    {% else %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Filament sensor cleared.") }{% endif %}
    {% endif %}


# Buffer top sensor (PB10, triggers when tube is at max)
[gcode_button buffer_top]
pin: ^buffer_mcu: PB10
press_gcode:  # Same as insert. If triggered during printing, buffer rotation distance is too low or there is a clog
    {% if printer["gcode_macro variables"].debug %}{ action_respond_info("buffer_top insert triggered!")}{% endif %}
    {% if printer["gcode_macro variables"].buffer_enabled and printer["gcode_button filament_detect"].state == 'PRESSED' %}
        # if printing and filament is loaded to buffer, increase rotation distance to push less filament then check again in 2s
        {% if printer["print_stats"].state == "printing" %}
            SETLED_BLUE
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_retry VALUE=True
            {% set current_rd = printer["gcode_macro variables"].buffer_rd %}
            {% set new_rd = current_rd * 1.30 %}  ; 30% higher rotation (less filament)
            SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=filament_buffer DISTANCE={new_rd}
            {% if  printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer bottom sensor (PB10) pressed, temp increase rotation_distance to {0}".format(new_rd))}{% endif %}
            UPDATE_DELAYED_GCODE ID=CHECK_TOP_SENSOR DURATION=4
        {% else %}
            # else if not printing and filament is loaded to buffer, then filament is either loading or clogged.
            {% if  printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer top sensor (PB10) pressed, not printing: checking auto load...") }{% endif %}
                #if auto load enabled, it should be trigger by filament sensor. If filament wasn't removed, do nothing.
                {% if  printer["gcode_macro variables"].auto_load_enabled and printer["gcode_button filament_detect"].state == 'PRESSED' %}
                    { action_respond_info("Auto load enabled. Filament is loading...") }
                    SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=
                    {% if printer.extruder.temperature < 180 %}
                        M109 S220
                        M400
                    {% endif %}
                    G1 E10 F300  # Load the filament into the toolhead, then sync
                    SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
                    SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=True

                {% else %}
                    { action_respond_info("Auto load disabled, waiting for manual load...") }    
            {% endif %}
        {% endif %}
    {% endif %}
release_gcode:  # Same as runout
    {% if printer["gcode_macro variables"].debug %}{ action_respond_info("buffer_top cleared top sensor")}{% endif %}

## Dynamic adjustment for buffer
## Delayed gcode to check buffer top sensor (PB10) after adjustment
[delayed_gcode CHECK_TOP_SENSOR]
gcode:
    {% set current_rd = printer["gcode_macro variables"].buffer_rd %}
    {% if printer["gcode_button buffer_top"].state == "PRESSED" %}    
        {% if printer["gcode_macro variables"].clog_retry %}
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_retry VALUE=False
            UPDATE_DELAYED_GCODE ID=CHECK_TOP_SENSOR DURATION=2
            {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer bottom sensor (PB11) still triggered after 2s. Retrying...") }{% endif %}
        {% else %} # it gave it two more seconds to clear buffer and it didn't. Assume clog.
            PAUSE
            SETLED_RED
            { action_respond_info("Buffer Top stuck high") }
        {% endif %}
    {% else %} # Buffer top sensor cleared, set back to green
        SETLED_GREEN
        {% set new_rd = current_rd * 1.01 %}  ; 1% higher (less filament)
        SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=filament_buffer DISTANCE={new_rd}
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_rd VALUE={new_rd}
        { action_respond_info("Top sensor cleared, rotation_distance set to {0}".format(new_rd)) }
    {% endif %}


# Buffer bottom sensor (PB11, triggers when tube is down)
[gcode_button buffer_bottom]
pin: ^buffer_mcu: PB11
press_gcode:  # Same as insert. If triggered during printing, buffer rotation distance is too high, or filament broke in bowden.
    { action_respond_info("buffer_bottom insert triggered!") }
    {% if printer["gcode_macro variables"].buffer_enabled %}
        # if printing and filament is loaded to buffer, decrease rotation distance to push more filament then check again in 2s
        {% if printer["print_stats"].state == "printing" and printer["gcode_button filament_detect"].state == 'PRESSED' %}
            SETLED_BLUE
            {% set current_rd = printer["gcode_macro variables"].buffer_rd %}
            {% set new_rd = current_rd * 0.70 %}  ; 30% lower rotation (more filament)
            SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=filament_buffer DISTANCE={new_rd}
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=break_retry VALUE=True
            {% if  printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer bottom sensor (PB11) pressed, temp decreased rotation_distance to {0}".format(new_rd)) }{% endif %}
            UPDATE_DELAYED_GCODE ID=CHECK_BOTTOM_SENSOR DURATION=4
        # else if not printing, then filament is either unloading or broken.
        {% else %}
            {% if printer["gcode_macro variables"].auto_unload_enabled %}
                { action_respond_info("Auto unload enabled, beginning retract...") }
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_unloading VALUE=True
            {% else %}
                { action_respond_info("Auto unload disabled, waiting for manual unload...") }    
            {% endif %}
        {% endif %}
    {% endif %}
release_gcode:  # Same as runout. If triggered, buffer was pushed up and is no longer an issue.
    {% if printer["gcode_macro variables"].debug %}{ action_respond_info("buffer_bottom cleared!") }{% endif %}

## Delayed gcode to check buffer bottom sensor (PB11) after adjustment
[delayed_gcode CHECK_BOTTOM_SENSOR]
gcode:
    {% set current_rd = printer["gcode_macro variables"].buffer_rd %}
    {% if printer["gcode_button buffer_bottom"].state == 'PRESSED' and printer["gcode_macro variables"].break_detect_enabled %}
        {% if printer["gcode_macro variables"].break_retry %}
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=break_retry VALUE=False
            UPDATE_DELAYED_GCODE ID=CHECK_BOTTOM_SENSOR DURATION=2
            {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer bottom sensor (PB11) still triggered after 2s. Retrying...") }{% endif %}
        {% else %}
            SETLED_RED
            PAUSE
            { action_respond_info("Buffer Bottom stuck low after retry. ") }
        {% endif %}
    {% elif printer["gcode_button buffer_bottom"].state == 'RELEASED' %}
        SETLED_GREEN
        {% set new_rd = current_rd * 0.99 %}  ; 1% lower (more filament)
        SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=filament_buffer DISTANCE={new_rd}
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_rd VALUE={new_rd}
        { action_respond_info("Buffer bottom sensor cleared, rotation_distance set to {0}".format(new_rd)) }
    {% endif %}

########################################################################
## Hardware Complete - Macros below
########################################################################

[delayed_gcode INITIAL_FILAMENT_CHECK]
initial_duration: 5
gcode:
    {% set current_target_temp  = printer.extruder.target|int %}
    CHECK_FILAMENT_STATUS
    {% if printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["gcode_button buffer_top"].state == "RELEASED" %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=False
    {% elif printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "PRESSED" and printer["gcode_button buffer_top"].state == "RELEASED" %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=True
    {% elif printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["gcode_button buffer_top"].state == "PRESSED" %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=False
        # The below force move is to push the filament up to center on the buffer, if it can. 
        BUFFER_STEPPER MOVE=-15 SPEED=10
        M400
        # {% if current_target_temp < 180 %}
        #     M109 S220
        # {% endif %}
        # G1 E10 F300
        # M400
        # M106 S0
    {% else %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=True
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_removed VALUE=True
    {% endif %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    { action_respond_info("Initial Filament Check complete. LazyBuffer macros are loaded and ready to go. Ver {0}".format(printer["gcode_macro variables"].module_version)) }




# This is the code for the button on the buffer.
[gcode_button BUFFER_BUTTON]
pin: ^buffer_mcu: PA1
press_gcode:
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=True
    UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=10
    UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_HELD DURATION=3
release_gcode:
    UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_HELD DURATION=0    # Cancel delayed gcode. Hold detected
    UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0
    {% if printer["gcode_macro variables"].is_manual_feeding %}
        # Button released before hold expired, so not held for 3s
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
        {% set current_mode = printer["gcode_macro variables"].buffer_mode %}
        {% if printer["print_stats"].state == "printing" %}  # Printer is Printing
            {% if current_mode == 0 %}  # 0 is Default mode, so change to Blue
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=2
                SETLED_DIMBLUE
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing: Default mode to Blue") }{% endif %}
            {% elif current_mode == 1 %} # 1 is Green mode, so change to Blue
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=2
                SETLED_DIMBLUE
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing:  Green mode to Blue") }{% endif %}
            {% elif current_mode == 2 %}  # 2 is Blue mode, so change to Red
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=3
                SETLED_DIMRED
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing: Blue mode to Red") }{% endif %}
            {% elif current_mode == 3 %}  # 3 is Red mode, so change to Green
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                SETLED_DIMGREEN
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing: Red mode to Green") }{% endif %}
            {% endif %}
        {% elif printer["print_stats"].state == 'paused' %}  # Printer is Paused
            {% if current_mode == 0 %}  # 0 is Default mode, so change to Green
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                SETLED_DIMGREEN
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused: Default mode to Green") }{% endif %}
            {% elif current_mode == 1 %} # 1 is Green mode, so change to Blue
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=2
                SETLED_DIMBLUE
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused: Green mode to Blue") }{% endif %}
            {% elif current_mode == 2 %}  # 2 is Blue mode, so change to Red
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=3
                SETLED_DIMRED
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused: Blue mode to Red") }{% endif %}
            {% elif current_mode == 3 %}  # 3 is Red mode, so change to Green
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                SETLED_DIMGREEN
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused: Red mode to Green") }{% endif %}
            {% endif %}
        {% else %}  # Printer is idle
            {% if current_mode == 0 %}  # 0 is Default mode, so change to Green
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                SETLED_DIMGREEN
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle: Default mode to Green") }{% endif %}
            {% elif current_mode == 1 %} # 1 is Green mode, so change to Red
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=3
                SETLED_DIMRED
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle: Green mode to Red") }{% endif %}
            {% elif current_mode == 2 %} # 2 is Blue mode, so change to Red
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=3
                SETLED_DIMRED
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle: Blue mode to Red") }{% endif %}
            {% elif current_mode == 3 %}  # 3 is Red mode, so change to Green
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                SETLED_DIMGREEN
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle: Red mode to Green") }{% endif %}
            {% endif %}
        {% endif %}
        M400
        UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=10
    {% endif %}

[delayed_gcode BUFFER_BUTTON_HELD]
    gcode:
        # If Printer is printing and the buffer button is held for 3s, execute action based on mode
        UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0
        {% if printer["print_stats"].state == "printing" and printer["gcode_macro variables"].is_manual_feeding %}
            {% if printer["gcode_macro variables"].buffer_mode == 1 %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing - Green: Execute - No action while printing") }{% endif %}
            {% elif printer["gcode_macro variables"].buffer_mode == 2 %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing - Blue: Execute - Pausing print") }{% endif %}
                PAUSE
            {% elif printer["gcode_macro variables"].buffer_mode == 3 %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing - Red: Execute - Stopping print") }{% endif %}
                CANCEL_PRINT
            {% else %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Printing - Default: No actions when in default mode") }{% endif %}
            {% endif %}
            # Clear buffer button state and return to Default mode
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
            SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=0
            M400
            UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0.1
        # If Printer is paused and the buffer button is held for 3s
        {% elif printer["print_stats"].state == "paused" and printer["gcode_macro variables"].is_manual_feeding %}
            {% if printer["gcode_macro variables"].buffer_mode == 1 and printer["gcode_button filament_detect"].state == "PRESSED" %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused - Green: Extruding") }{% endif %}
                {% if printer.extruder.temperature < 180 %}
                    M109 S220
                {% endif %}
                G1 E5 F120
                M400
                UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0
                UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_HELD DURATION=0.1  # Repeat for continuous feed
            {% elif printer["gcode_macro variables"].buffer_mode == 2 %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused - Blue: Execute - Resuming print") }{% endif %}
                RESUME
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=0
                M400
                UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0.1
            {% elif printer["gcode_macro variables"].buffer_mode == 3 and printer["gcode_button filament_detect"].state == "PRESSED" %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused - Red: Execute - Retracting") }{% endif %}
                {% if printer.extruder.temperature < 180 %}
                    M109 S220
                {% endif %}
                G1 E-5 F120
                M400
                UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_HELD DURATION=0.1  # Repeat for continuous feed
            {% else %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Paused - Default: Execute - No actions when in default mode") }{% endif %}
            {% endif %}
        # If Printer is idle and the buffer button is held for 3s
        {% else %}
            # Mode 1 is Green - Auto Load
            {% if printer["gcode_macro variables"].buffer_mode == 1 and printer["gcode_button filament_detect"].state == "PRESSED" %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle - Green: Execute - Auto Load Macro") }{% endif %}
                UPDATE_DELAYED_GCODE ID=CHECK_AUTO_LOAD DURATION=0.1  # Repeat for continuous feed
            # Mode 2 is Blue - No action
            {% elif printer["gcode_macro variables"].buffer_mode == 2 %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle - Blue: Execute - Blue has no action") }{% endif %}
                SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=0
                M400
                UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=0.1
            # Mode 3 is Red - Auto Unload
            {% elif printer["gcode_macro variables"].buffer_mode == 3 and printer["gcode_button filament_detect"].state == "PRESSED" %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle - Red: Execute - Auto Unload Macro") }{% endif %}
                UPDATE_DELAYED_GCODE ID=CHECK_AUTO_UNLOAD DURATION=0.1  # Repeat for continuous
            {% else %}
                {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Idle - Default: Execute - No actions when in default mode") }{% endif %}
            {% endif %}
        {% endif %}
        CHECK_FILAMENT_STATUS

[delayed_gcode BUFFER_BUTTON_RESET]
gcode:
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=0
    CHECK_FILAMENT_STATUS
    {% if printer["gcode_macro variables"].debug %}{ action_respond_info("Buffer button reset to default mode.") }{% endif %}

[delayed_gcode CHECK_AUTO_LOAD]
gcode:
    # Cancel any existing CHECK_AUTO_LOAD instance
    {% if printer["gcode_macro variables"].check_auto_load_active %}
        {% if printer["gcode_macro variables"].debug %}
            { action_respond_info("Canceling existing CHECK_AUTO_LOAD instance") }
        {% endif %}
        UPDATE_DELAYED_GCODE ID=CHECK_AUTO_LOAD DURATION=0
    {% endif %}
    # Set the active flag
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=check_auto_load_active VALUE=True
    {% if printer["gcode_macro variables"].auto_load_enabled %}
        # Filament is loaded to buffer (keep feeding)
        {% if printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_macro variables"].filament_loading %}
            # If filament is loaded to buffer, but bottom switch/button still pressed, load fast
            {% if printer["gcode_button buffer_bottom"].state == "PRESSED" %}
                {% if printer["gcode_macro variables"].debug %}
                    { action_respond_info("Filament loaded to buffer, but not to the toolhead, push 25") }
                {% endif %}
                BUFFER_STEPPER MOVE=10 SPEED=25
                {% if printer["gcode_macro variables"].buffer_mode != 1 %}
                    SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=1
                {% endif %}
                M400
                UPDATE_DELAYED_GCODE ID=CHECK_AUTO_LOAD DURATION=0.5
            # Else, filament is loaded in buffer, but buffer has pushed away from the bottom of the buffer, load slower
            {% else %}
                {% if printer["gcode_macro variables"].debug %}
                    { action_respond_info("Filament is out of toolhead, unsync and push faster") }
                {% endif %}
                # If bottom buffer sensor is released, we need to load slow until the top buffer triggers
                {% if printer["gcode_button buffer_top"].state == "RELEASED" %}
                    BUFFER_STEPPER MOVE=5 SPEED=20
                    M400
                    UPDATE_DELAYED_GCODE ID=CHECK_AUTO_LOAD DURATION=0.5
                # When top buffer sensor is triggered, we can stop loading from feeder
                {% elif printer["gcode_button buffer_top"].state == "PRESSED" %}
                    SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_loading VALUE=False
                    SYNC_BUFFER SYNC=1
                    M400
                    {% if printer.extruder.temperature < 180 %}
                        UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=300
                        M109 S220
                        G1 E50 F120
                        M400
                    {% elif printer.extruder.temperature >= 180 %}
                        G1 E50 F120
                        M400
                    {% endif %}
                    {% if printer["print_stats"].state != "paused" and printer["print_stats"].state != "printing" %}
                        M109 S0
                        M400
                    {% endif %}
                    {% if printer["gcode_macro variables"].debug %}
                        { action_respond_info("Filament loaded to toolhead...") }
                    {% endif %}
                    CHECK_FILAMENT_STATUS  # Reset LED state after loading completes
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    # Clear the active flag when done
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=check_auto_load_active VALUE=False

[delayed_gcode CHECK_AUTO_UNLOAD]
gcode:
    # Cancel any existing CHECK_AUTO_UNLOAD instance
    {% if printer["gcode_macro variables"].check_auto_unload_active %}
        {% if printer["gcode_macro variables"].debug %}
            { action_respond_info("Canceling existing CHECK_AUTO_UNLOAD instance") }
        {% endif %}
        UPDATE_DELAYED_GCODE ID=CHECK_AUTO_UNLOAD DURATION=0
    {% endif %}
    # Set the active flag
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=check_auto_unload_active VALUE=True
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_mode VALUE=3
    {% if printer["gcode_button filament_detect"].state == "PRESSED" %}
        # If filament is still in the toolhead, the bottom switch/button will be in release state
        {% if printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["print_stats"].state != "printing" %}
            {% if printer["gcode_macro variables"].debug %}
                { action_respond_info("Filament loaded, but not out of the toolhead, retract 25") }
            {% endif %}
            SYNC_BUFFER SYNC=1
            {% if printer.extruder.temperature < 180 %}
                M109 S220
            {% endif %}
            G1 E10 F120
            M400
            G1 E-25 F300
            M400
            UPDATE_DELAYED_GCODE ID=CHECK_AUTO_UNLOAD DURATION=1
        # Else, filament is out of the toolhead, the bottom switch/button will be in press state
        {% else %}
            {% if printer["gcode_macro variables"].debug %}
                { action_respond_info("Filament is out of toolhead, unsync and retract faster") }
            {% endif %}
            SYNC_BUFFER SYNC=0
            BUFFER_STEPPER MOVE=-100 SPEED=30
            M400
            UPDATE_DELAYED_GCODE ID=CHECK_AUTO_UNLOAD DURATION=0.2
        {% endif %}
    {% else %}
        # Filament is unloaded from the buffer (stop feeding)
        { action_respond_info("Filament unloaded successfully.") }
        {% if printer["print_stats"].state != "paused" and printer["print_stats"].state != "printing" %}
            M109 S0
        {% endif %}
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_unloading VALUE=False
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=filament_removed VALUE=True
        UPDATE_DELAYED_GCODE ID=BUFFER_BUTTON_RESET DURATION=1
        CHECK_FILAMENT_STATUS  # Reset LED state after unloading completes
    {% endif %}
    # Clear the active flag when done
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=check_auto_unload_active VALUE=False

########################################################################

# Manual movement for buffer
[gcode_macro BUFFER_STEPPER]
gcode:
    {% set move = params.MOVE|default(0)|float %}
    {% set speed = params.SPEED|default(3)|float %}
    {% if  printer["gcode_macro variables"].debug %}{ action_respond_info("FORCE_MOVE called with params: MOVE={0}, SPEED={1}".format(move, speed)) }{% endif %}
    {% if printer["gcode_button filament_detect"].state == "PRESSED" and printer["print_stats"].state != "printing" %}
        FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
        M400
    {% else %}
        {% if printer["gcode_macro variables"].debug %}{ action_respond_info("FORCE_MOVE called but not executed. Requested: MOVE={0}, SPEED={1}".format(move, speed)) }{% endif %}
        { action_respond_info("Cannot move buffer while printing or filament is not detected!") }
    {% endif %}


[gcode_macro SYNC_BUFFER]
gcode:
    {% set sync = params.SYNC|default(1)|int %}
    {% if sync == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=
    {% elif sync == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
    {% endif %}
  

[gcode_macro BUFFER_POSITION_RESET]
gcode:
    SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_reset VALUE=True
    # This will just reset the buffer switch to center the buffer between sensors.
    {% if printer["print_stats"].state != "printing" and printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "RELEASED" %}
        BUFFER_STEPPER MOVE=-1 SPEED=10
        M400
        UPDATE_DELAYED_GCODE ID=CHECK_BUFFER_RESET DURATION=0.2
    {% elif printer["print_stats"].state == "printing" %}
        { action_respond_info("Cannot reset buffer while printing!") }
    {% elif printer["gcode_button filament_detect"].state == "RELEASED" %}
        { action_respond_info("Cannot reset buffer while filament is not detected!") } 
    {% endif %}

    
[delayed_gcode CHECK_BUFFER_RESET]
gcode:
    {% if printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["gcode_macro variables"].buffer_reset %}
        BUFFER_STEPPER MOVE=-1 SPEED=10
        M400
        UPDATE_DELAYED_GCODE ID=CHECK_BUFFER_RESET DURATION=0.2
    {% elif printer["gcode_button buffer_bottom"].state == "PRESSED" and printer["gcode_macro variables"].buffer_reset %}
        BUFFER_STEPPER MOVE=13 SPEED=20
        M400
        SYNC_EXTRUDER_MOTION EXTRUDER=filament_buffer MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=buffer_reset VALUE=False
        { action_respond_info("Buffer reset complete.") }
    {% else %}
        { action_respond_info("Buffer reset cancelled.") }
    {% endif %}


[gcode_macro TEST_SENSORS]
gcode:
    { action_respond_info("Testing sensors...") }
    { action_respond_info("Buffer mode: {0}".format(printer["gcode_macro variables"].buffer_mode)) }
    { action_respond_info("led state: {0}".format(printer["gcode_macro variables"].led_state)) }
    { action_respond_info("Filament sensor: {0}".format(printer["gcode_button filament_detect"].state)) }
    { action_respond_info("Buffer top sensor: {0}".format(printer["gcode_button buffer_top"].state)) }
    { action_respond_info("Buffer bottom sensor: {0}".format(printer["gcode_button buffer_bottom"].state)) }
    { action_respond_info("filament loading: {0}".format(printer["gcode_macro variables"].filament_loading)) }
    { action_respond_info("filament unloading: {0}".format(printer["gcode_macro variables"].filament_unloading)) }
    { action_respond_info("filament removed: {0}".format(printer["gcode_macro variables"].filament_removed)) }
    { action_respond_info("stop feeding: {0}".format(printer["gcode_macro variables"].stop_feeding)) }
    { action_respond_info("is manual feeding: {0}".format(printer["gcode_macro variables"].is_manual_feeding)) }
    { action_respond_info("plug status: {0}".format(printer["gcode_macro variables"].plug_status)) }
    { action_respond_info("winding status: {0}".format(printer["gcode_macro variables"].winding_status)) }
    { action_respond_info("clog retry: {0}".format(printer["gcode_macro variables"].clog_retry)) }
    { action_respond_info("break retry: {0}".format(printer["gcode_macro variables"].break_retry)) }
    { action_respond_info("auto load step: {0}".format(printer["gcode_macro variables"].auto_load_step)) }
    { action_respond_info("auto unload step: {0}".format(printer["gcode_macro variables"].auto_unload_step)) }
    { action_respond_info("check auto load active: {0}".format(printer["gcode_macro variables"].check_auto_load_active)) }
    { action_respond_info("check auto unload active: {0}".format(printer["gcode_macro variables"].check_auto_unload_active)) }
    {% if printer["gcode_button buffer_top"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "PRESSED" %}
        { action_respond_info("Error: Both buffer sensors triggered simultaneously. Check sensor wiring or hardware.") }
    {% endif %}        

########################################################################

# LED pins
[output_pin red_led]
pin: !buffer_mcu: PC14
value: 0

[output_pin blue_led]
pin: !buffer_mcu: PC15
value: 0

[output_pin green_led]
pin: !buffer_mcu: PB1
value: 0

[gcode_macro SETLED_GREEN]
gcode:
    {% if printer["gcode_macro variables"].led_state != 1 %}
        SET_PIN PIN=red_led VALUE=0
        SET_PIN PIN=blue_led VALUE=0
        SET_PIN PIN=green_led VALUE=1
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=1
    {% endif %}

[gcode_macro SETLED_BLUE]
gcode:
    {% if printer["gcode_macro variables"].led_state != 2 %}
        SET_PIN PIN=red_led VALUE=0
        SET_PIN PIN=blue_led VALUE=1
        SET_PIN PIN=green_led VALUE=0
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=2
    {% endif %}

[gcode_macro SETLED_RED]
gcode:
    {% if printer["gcode_macro variables"].led_state != 3 %}
        SET_PIN PIN=red_led VALUE=1
        SET_PIN PIN=blue_led VALUE=0
        SET_PIN PIN=green_led VALUE=0
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=3
    {% endif %}

[gcode_macro SETLED_DIMGREEN]
gcode:
    {% if printer["gcode_macro variables"].led_state != 4 %}
        SET_PIN PIN=red_led VALUE=0
        SET_PIN PIN=blue_led VALUE=0
        SET_PIN PIN=green_led VALUE=1
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=4
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% endif %}

[gcode_macro SETLED_DIMBLUE]
gcode:
    {% if printer["gcode_macro variables"].led_state != 5 %}
        SET_PIN PIN=red_led VALUE=0
        SET_PIN PIN=blue_led VALUE=1
        SET_PIN PIN=green_led VALUE=0
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=5
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% endif %}

[gcode_macro SETLED_DIMRED]
gcode:
    {% if printer["gcode_macro variables"].led_state != 6 %}
        SET_PIN PIN=red_led VALUE=1
        SET_PIN PIN=blue_led VALUE=0
        SET_PIN PIN=green_led VALUE=0
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=6
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% endif %}

[gcode_macro SETLED_OFF]
gcode:
    {% if printer["gcode_macro variables"].led_state != 0 %}
        SET_PIN PIN=red_led VALUE=0
        SET_PIN PIN=blue_led VALUE=0
        SET_PIN PIN=green_led VALUE=0
        SET_GCODE_VARIABLE MACRO=variables VARIABLE=led_state VALUE=0
    {% endif %}

[delayed_gcode BLINK_LED_OFF]
gcode:
    SETLED_OFF
    UPDATE_DELAYED_GCODE ID=BLINK_LED_ON DURATION=0.5


[delayed_gcode BLINK_LED_ON]
gcode:
    {% if printer["gcode_macro variables"].filament_loading %}
        SETLED_DIMGREEN
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% elif printer["gcode_macro variables"].filament_unloading %}
        SETLED_DIMRED
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% elif printer["gcode_macro variables"].buffer_mode == 1 %}
        SETLED_DIMGREEN
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% elif printer["gcode_macro variables"].buffer_mode == 2 %}
        SETLED_DIMBLUE
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% elif printer["gcode_macro variables"].buffer_mode == 3 %}
        SETLED_DIMRED
        UPDATE_DELAYED_GCODE ID=BLINK_LED_OFF DURATION=0.5
    {% else %}
        CHECK_FILAMENT_STATUS
    {% endif %}


[gcode_macro CHECK_FILAMENT_STATUS]
gcode:
    {% if printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["gcode_button buffer_top"].state == "RELEASED" %}
        SETLED_GREEN
    {% elif printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "PRESSED" and printer["gcode_button buffer_top"].state == "RELEASED" %}
        SETLED_BLUE
    {% elif printer["gcode_button filament_detect"].state == "PRESSED" and printer["gcode_button buffer_bottom"].state == "RELEASED" and printer["gcode_button buffer_top"].state == "PRESSED" %}
        SETLED_BLUE
    {% else %}
        SETLED_RED
    {% endif %}
    
########################################################################
# Dummy macros for compatibility with original code. Currently unused.
# Just prints out a statement when called by original code.
########################################################################


[output_pin fake_filament_sensor]
pin: virtual_pin:fake_filament_sensor_pin
pwm: True
cycle_time: 0.1
# SET_PIN PIN=fake_filament_sensor VALUE=0


[filament_switch_sensor filament_sensor]
pause_on_runout: False
switch_pin: virtual_pin: fake_filament_sensor
insert_gcode: { action_respond_info("filament_sensor insert triggered, but it is disabled.") }
runout_gcode: { action_respond_info("filament_sensor runout triggered, but it is disabled.") }
# pause_on_runout: False
# switch_pin: ^buffer_mcu: PA10
# insert_gcode:
#     SET_PIN PIN=green_led VALUE=1.00
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
# runout_gcode:
#     CONTINUE_PRINT_D D={1100}
#     {action_respond_info("filament exhausted!")}


[gcode_button manual_push]
pin: virtual_pin: fake_manual_push_pin
press_gcode: { action_respond_info("manual_push pressed, but it is disabled.") }
release_gcode:{ action_respond_info("manual_push released, but it is disabled.") }
# pin: buffer_mcu: PA1
# press_gcode:
# release_gcode:
    # {% if printer["filament_switch_sensor filament_sensor"].filament_detected and printer["print_stats"].state != "printing" and printer["gcode_button stall_push_stop"].state != "PRESSED" %}
    #     {% if printer["gcode_macro variables"].is_manual_feeding %}
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=stop_feeding VALUE=True
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
    #         FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
    #         BUFFER_STEPPER STEPPER=filament_buffer ENABLE=0
    #         UPDATE_DELAYED_GCODE ID=feed_loop DURATION=0
    #     {% else %}
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=stop_feeding VALUE=False
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=True
    #         FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
    #         BUFFER_STEPPER STEPPER=filament_buffer ENABLE=1
    #         FEED_LOOP
    #     {% endif %}
    # {% endif %}

[gcode_button stall_push_stop]
pin: virtual_pin: fake_stall_push_stop_pin
press_gcode: { action_respond_info("stall_push_stop pressed, but it is disabled.") }
release_gcode: { action_respond_info("stall_push_stop released, but it is disabled.") }
# pin: ^buffer_mcu: PB10
# press_gcode:
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=stop_feeding VALUE=True
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=is_manual_feeding VALUE=False
#     FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
#     BUFFER_STEPPER STEPPER=filament_buffer ENABLE=0
# release_gcode:

[gcode_macro FEED_LOOP] 
gcode:
    { action_respond_info("FEED_LOOP called. Unused in this config.") }
#   {% if printer["gcode_macro variables"].stop_feeding|default(False) %}
#     { action_respond_info("stop push filament") }
#     SET_GCODE_VARIABLE MACRO=variables VARIABLE=stop_feeding VALUE=False
#   {% else %}
#     FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
#     BUFFER_STEPPER STEPPER=filament_buffer MOVE=2 SPEED=50
#     UPDATE_DELAYED_GCODE ID=feed_loop DURATION=0.06
#   {% endif %}

[delayed_gcode feed_loop]
gcode:
    { action_respond_info("FEED_LOOP delayed gcode called. Unused in this config.") }
    #FEED_LOOP

# Currently unused. Just stores variables and prints out a statement when called by original code.
[gcode_macro NOZZLE_CLOG_CHECK]
variable_extrusion_start: 0
variable_time_start: 0
gcode:
    {% set extrusion_start = printer.print_stats.filament_used|int %}
    {% set time_start = printer.print_stats.print_duration|int %}
    { action_respond_info("OFE NOZZLE_CLOG_CHECK macro called. Clog check is now automated. {0}, {1}.  Unused in this config.".format(extrusion_start, time_start)) }
    # SET_GCODE_VARIABLE MACRO=NOZZLE_CLOG_CHECK VARIABLE=extrusion_start VALUE={extrusion_start}
    # SET_GCODE_VARIABLE MACRO=NOZZLE_CLOG_CHECK VARIABLE=time_start VALUE={time_start}
    # {% if time_start > 0 %}
    #     UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=1
    # {% endif %}

# Not sure if this is used....
[delayed_gcode CHECK_NOZZLE_CLOG]
gcode:
    {% set current_extrusion = printer.print_stats.filament_used|int %}
    {% set extrusion_start = printer["gcode_macro NOZZLE_CLOG_CHECK"].extrusion_start|int %}
    {% set delta_extrusion = current_extrusion - extrusion_start %}
    { action_respond_info("CHECK_NOZZLE_CLOG called with params: {0}. Unused in this config.".format(params)) }
    # {% if printer["filament_switch_sensor buffer_top"].state == 'PRESSED' and printer["print_stats"].state == "printing" %}
    #     G4 P5000  # Wait 5s
    #     {% if printer["filament_switch_sensor buffer_top"].state == 'PRESSED' %}
    #         SET_PIN PIN=green_led VALUE=0
    #         SET_PIN PIN=red_led VALUE=1
    #         PAUSE
    #         { action_respond_info("Potential clog detected: buffer at max position!") }
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=plug_status VALUE=True
    #     {% endif %}
    # {% elif delta_extrusion > 50 and not printer["gcode_macro variables"].clog_retry %}
    #     {% if printer["print_stats"].state == "printing" and printer["gcode_button filament_sensor"].state == "PRESSED" %}
    #         SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_retry VALUE=True
    #         UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=5
    #     {% else %}
    #         UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=0
    #     {% endif %}
    # {% elif delta_extrusion > 50 and printer["gcode_macro variables"].clog_retry %}
    #     SET_PIN PIN=green_led VALUE=0
    #     SET_PIN PIN=red_led VALUE=1
    #     PAUSE
    #     { action_respond_info("Nozzle clog detected! Extruded only: {0}".format(delta_extrusion)) }
    #     SET_GCODE_VARIABLE MACRO=variables VARIABLE=plug_status VALUE=True
    #     SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_retry VALUE=False
    #     UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=0
    # {% else %}
    #     {% if printer["print_stats"].state == "printing" and printer["gcode_button filament_sensor"].state == "PRESSED" %}
    #         UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=1
    #     {% else %}
    #         UPDATE_DELAYED_GCODE ID=CHECK_NOZZLE_CLOG DURATION=0
    #     {% endif %}
    #     SET_GCODE_VARIABLE MACRO=variables VARIABLE=plug_status VALUE=False
    #     SET_GCODE_VARIABLE MACRO=variables VARIABLE=clog_retry VALUE=False
    # {% endif %}


# Currently unused. Need to examine and see if it does something useful and incorporate in current checks.
[gcode_macro BUFFER_LONG_UNLOAD_FILAMENT]
gcode:
    { action_respond_info("BUFFER_LONG_UNLOAD_FILAMENT called.  Unused in this config.") }
    # UNLOAD_FILAMENT
    # FORCE_MOVE STEPPER="extruder_stepper filament_buffer" DISTANCE={move} VELOCITY={speed}
    # BUFFER_STEPPER STEPPER=filament_buffer MOVE=-100 SPEED=10
    # BUFFER_STEPPER STEPPER=filament_buffer MOVE=-2000 SPEED=50

# Currently unused. Need to examine and see if it does something useful and incorporate in current checks.
[gcode_macro MANUAL_FEED]
gcode:
    #BUFFER_POSITION_RESET
    { action_respond_info("MANUAL_FEED called.   Unused in this config.") }
    # {% if printer["filament_switch_sensor filament_sensor"].filament_detected and printer["buffer_stepper filament_buffer"].push_triggered %}
    #     BUFFER_STEPPER STEPPER=filament_buffer MOVE=25 SPEED=100 SYNC=1
    # {% endif %}


## These are Macros from the Macro.cfg file that I pasted here for reference, as they are called from macros in this file.
[gcode_macro CONTINUE_PRINT_D]
variable_end_d: 0 
gcode:
    { action_respond_info("CONTINUE PRINT D called.   Unused in this config.") }
    # {% set d_start = printer.print_stats.filament_used|float %}
    # {% set d_end = (d_start + params.D|float)|float %} 
    #     SET_GCODE_VARIABLE MACRO=CONTINUE_PRINT_D VARIABLE=end_d VALUE={d_end} 
    #     UPDATE_DELAYED_GCODE ID=VERIFY_PRINT_D DURATION=1 

[delayed_gcode VERIFY_PRINT_D]
initial_duration: 0 
gcode:
    { action_respond_info("VERIFY_PRINT_D called.   Unused in this config.") }
    # {% if printer.print_stats.state == "printing" and printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
    #     {% set d_current = printer.print_stats.filament_used|float %} 
    #     {% if d_current < printer["gcode_macro CONTINUE_PRINT_D"].end_d %} 
    #         UPDATE_DELAYED_GCODE ID=VERIFY_PRINT_D DURATION=1 
    #     {% else %}
    #         M600
    #         UPDATE_DELAYED_GCODE ID=VERIFY_PRINT_D DURATION=0 
    #         SET_GCODE_VARIABLE MACRO=_global_var VARIABLE=filament_sensor_print VALUE=True
    #     {% endif %}
    # {% else %}
    #     UPDATE_DELAYED_GCODE ID=VERIFY_PRINT_D DURATION=0
    # {% endif %}
